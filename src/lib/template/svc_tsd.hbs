// package: {{{packageName}}}
// file: {{{fileName}}}

/* tslint:disable */

{{#each imports}}
{{{this}}}
{{/each}}
{{#each services}}

interface I{{{serviceName}}}Service extends grpc.ServiceDefinition<grpc.UntypedServiceImplementation> {
    {{#each methods}}
    {{lcFirst methodName}}: I{{{methodName}}};
    {{/each}}
}

    {{#each methods}}
interface I{{{methodName}}} {
    path: string; // "/{{{packageName}}}.{{{serviceName}}}/{{{methodName}}}"
    requestStream: boolean; // {{{requestStream}}}
    responseStream: boolean; // {{{responseStream}}}
    requestType: {{{requestTypeName}}};
    responseType: {{{responseTypeName}}};
    requestSerialize: (arg: {{{requestTypeName}}}) => Buffer;
    requestDeserialize: (buffer: Uint8Array) => {{{requestTypeName}}};
    responseSerialize: (arg: {{{responseTypeName}}}) => Buffer;
    responseDeserialize: (buffer: Uint8Array) => {{{responseTypeName}}};
}
    {{/each}}

export interface I{{{serviceName}}}Client {
    {{#each methods}}
        {{#eq type "ClientUnaryCall"}}
    {{lcFirst methodName}}(request: {{{requestTypeName}}}, callback: (error: Error | null, response: {{{responseTypeName}}}) => void): grpc.ClientUnaryCall;
    {{lcFirst methodName}}(request: {{{requestTypeName}}}, metadata: grpc.Metadata, callback: (error: Error | null, response: {{{responseTypeName}}}) => void): grpc.ClientUnaryCall;
        {{/eq}}
        {{#eq type "ClientWritableStream"}}
    {{lcFirst methodName}}(callback: (error: Error | null, response: {{{responseTypeName}}}) => void): grpc.ClientWritableStream<{{{requestTypeName}}}>;
    {{lcFirst methodName}}(metadata: grpc.Metadata, callback: (error: Error | null, response: {{{responseTypeName}}}) => void): grpc.ClientWritableStream<{{{requestTypeName}}}>;
        {{/eq}}
        {{#eq type "ClientReadableStream"}}
    {{lcFirst methodName}}(request: {{{requestTypeName}}}, metadata?: grpc.Metadata): grpc.ClientReadableStream<{{{requestTypeName}}}>;
        {{/eq}}
        {{#eq type "ClientDuplexStream"}}
    {{lcFirst methodName}}(): grpc.ClientDuplexStream<{{{requestTypeName}}}, {{{responseTypeName}}}>;
    {{lcFirst methodName}}(metadata: grpc.Metadata): grpc.ClientDuplexStream<{{{requestTypeName}}}, {{{responseTypeName}}}>;
        {{/eq}}
    {{/each}}
}

export const {{{serviceName}}}Service: I{{{serviceName}}}Service;
export class {{{serviceName}}}Client extends grpc.Client implements I{{{serviceName}}}Client {
    constructor(address: string, credentials: grpc.ChannelCredentials, options?: object);
    {{#each methods}}
        {{#eq type "ClientUnaryCall"}}
    public {{lcFirst methodName}}(request: {{{requestTypeName}}}, callback: (error: Error | null, response: {{{responseTypeName}}}) => void): grpc.ClientUnaryCall;
    public {{lcFirst methodName}}(request: {{{requestTypeName}}}, metadata: grpc.Metadata, callback: (error: Error | null, response: {{{responseTypeName}}}) => void): grpc.ClientUnaryCall;
        {{/eq}}
        {{#eq type "ClientWritableStream"}}
    public {{lcFirst methodName}}(callback: (error: Error | null, response: {{{responseTypeName}}}) => void): grpc.ClientWritableStream<{{{requestTypeName}}}>;
    public {{lcFirst methodName}}(metadata: grpc.Metadata, callback: (error: Error | null, response: {{{responseTypeName}}}) => void): grpc.ClientWritableStream<{{{requestTypeName}}}>;
        {{/eq}}
        {{#eq type "ClientReadableStream"}}
    public {{lcFirst methodName}}(request: {{{requestTypeName}}}, metadata?: grpc.Metadata): grpc.ClientReadableStream<{{{requestTypeName}}}>;
        {{/eq}}
        {{#eq type "ClientDuplexStream"}}
    public {{lcFirst methodName}}(metadata?: grpc.Metadata): grpc.ClientDuplexStream<{{{requestTypeName}}}, {{{responseTypeName}}}>;
        {{/eq}}
    {{/each}}
}
{{/each}}